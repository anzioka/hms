-- MySQL Script generated by MySQL Workbench
-- Tue May 29 10:30:53 2018
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS = @@UNIQUE_CHECKS, UNIQUE_CHECKS = 0;
SET @OLD_FOREIGN_KEY_CHECKS = @@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS = 0;
SET @OLD_SQL_MODE = @@SQL_MODE, SQL_MODE = 'TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
drop schema if exists hmsdb;
CREATE SCHEMA IF NOT EXISTS hmsdb
  DEFAULT CHARACTER SET utf8;
USE hmsdb;

-- -----------------------------------------------------
-- Table hmsdb.cashsales
-- -----------------------------------------------------
DROP TABLE IF EXISTS hmsdb.cashsales;

CREATE TABLE IF NOT EXISTS hmsdb.cashsales (
  ID            INT(11)      NOT NULL AUTO_INCREMENT,
  VisitId       INT(11)      NOT NULL,
  ReceiptNumber INT(11)      NOT NULL,
  Amount        DOUBLE       NOT NULL,
  Description   VARCHAR(255) NOT NULL,
  Status        VARCHAR(32)  NOT NULL,
  Category      VARCHAR(32)  NOT NULL,
  Quantity      INT(11)      NOT NULL,
  PRIMARY KEY (ID)
)
  ENGINE = InnoDB
  AUTO_INCREMENT = 2
  DEFAULT CHARACTER SET = utf8;

-- -----------------------------------------------------
-- Table hmsdb.drugs
-- -----------------------------------------------------
DROP TABLE IF EXISTS hmsdb.drugs;

CREATE TABLE IF NOT EXISTS hmsdb.drugs (
  DrugCode      int          not null auto_increment,
  Name          VARCHAR(255) NOT NULL,
  StoreQuantity INT(11),
  ShopQuantity  INT(11),
  SellingPrice  DOUBLE,
  BuyingPrice   DOUBLE       NOT NULL,
  ReorderLevel  INT(11),
  primary key (DrugCode)
)
  ENGINE = InnoDB
  AUTO_INCREMENT = 1001
  DEFAULT CHARACTER SET = utf8;

-- -----------------------------------------------------
-- Table hmsdb.hospital
-- -----------------------------------------------------
DROP TABLE IF EXISTS hmsdb.hospital;

CREATE TABLE IF NOT EXISTS hmsdb.hospital (
  ID          INT          NOT NULL,
  Name        VARCHAR(255) NULL DEFAULT NULL,
  Address     VARCHAR(255) NULL,
  City        VARCHAR(64)  NULL,
  PhoneNumber VARCHAR(16)  NULL,
  letter_head longblob     null,
  PRIMARY KEY (ID)
)
  ENGINE = InnoDB
  DEFAULT CHARACTER SET = utf8;

-- -----------------------------------------------------
-- Table hmsdb.insurance
-- -----------------------------------------------------
DROP TABLE IF EXISTS hmsdb.insurance;

CREATE TABLE IF NOT EXISTS hmsdb.insurance (
  Name           VARCHAR(255) NOT NULL,
  InsuranceGroup VARCHAR(255) NULL DEFAULT NULL,
  PRIMARY KEY (Name)
)
  ENGINE = InnoDB
  DEFAULT CHARACTER SET = utf8;

-- -----------------------------------------------------
-- Table hmsdb.insurancegroups
-- -----------------------------------------------------
DROP TABLE IF EXISTS hmsdb.insurancegroups;

CREATE TABLE IF NOT EXISTS hmsdb.insurancegroups (
  Name            VARCHAR(255) NOT NULL,
  ConsultationFee DOUBLE       NOT NULL,
  PRIMARY KEY (Name)
)
  ENGINE = InnoDB
  DEFAULT CHARACTER SET = utf8;

-- -----------------------------------------------------
-- Table hmsdb.invoices
-- -----------------------------------------------------
DROP TABLE IF EXISTS hmsdb.invoices;

CREATE TABLE IF NOT EXISTS hmsdb.invoices (
  ID                INT(11)      NOT NULL AUTO_INCREMENT,
  VisitId           INT(11)      NOT NULL,
  InvoiceNumber     INT(11)      NOT NULL,
  Amount            DOUBLE       NOT NULL,
  Description       VARCHAR(255) NOT NULL,
  Status            VARCHAR(32)  NOT NULL,
  Category          VARCHAR(32)  NOT NULL,
  InsuranceProvider VARCHAR(255) NOT NULL,
  Quantity          INT(11)      NOT NULL,
  PRIMARY KEY (ID)
)
  ENGINE = InnoDB
  AUTO_INCREMENT = 2
  DEFAULT CHARACTER SET = utf8;

-- radiology
drop table if exists radiology_items;
create table radiology_items(
  id int not null auto_increment primary key,
  category varchar(64) not null ,
  description varchar (128) not null,
  cost double not null
);

drop table if exists radiology_requests;
create table radiology_requests(
  request_id int not null auto_increment primary key,
  item_id int not null,
  patient_id varchar(64) not null,
  admission_num int not null,
  visit_id int not null,
  doctor_id int not null,
  date date not null,
  time time not null,
  status varchar(64) not null,
  result text null,
  foreign key (item_id) references radiology_items(id),
  foreign key (doctor_id) references users(ID),
  foreign key (patient_id) references patients(PatientID)
);

-- -----------------------------------------------------
-- Table hmsdb.labrequests
-- -----------------------------------------------------
DROP TABLE IF EXISTS hmsdb.lab_requests;

CREATE TABLE IF NOT EXISTS hmsdb.lab_requests (
  ID           INT(11)     NOT NULL AUTO_INCREMENT,
  QueueId      INT(11),
  AdmissionNum INT(11),
  TestId       int         NOT NULL,
  Status       VARCHAR(16) NOT NULL,

  Specimen     varchar(64),
  TimeCreated  TIME        NOT NULL,
  DateCreated  DATE        NOT NULL,
  UserId       int         not null,
  PatientId    varchar(64) not null,
  PRIMARY KEY (ID),
  FOREIGN KEY (TestId) references labtests (TestId),
  foreign key (UserId) references users (Id),
  foreign key (patientId) references patients (PatientID)
)
  ENGINE = InnoDB
  AUTO_INCREMENT = 2
  DEFAULT CHARACTER SET = utf8;

-- lab test flags
drop table if exists lab_test_flags;
create table if not exists lab_test_flags (
  TestId   int         not null,
  FlagName varchar(64) not null,
  RefRange varchar(64),
  foreign key (TestId) references labtests (TestId)
);
-- -----------------------------------------------------
-- Table hmsdb.labtests
-- -----------------------------------------------------
DROP TABLE IF EXISTS hmsdb.labtests;

CREATE TABLE IF NOT EXISTS hmsdb.labtests (
  TestId   int          not null primary key auto_increment,
  TestName VARCHAR(128) NOT NULL,
  Cost     DOUBLE       NOT NULL
)
  ENGINE = InnoDB
  DEFAULT CHARACTER SET = utf8;

-- Table test_results
DROP table if exists lab_test_results;
Create Table if not exists lab_test_results (
  RequestId   int         not null,
  Result      text,
  comment     text,
  Specimen    varchar(64) not null,
  DateCreated Date        not null,
  TimeCreated Time        not null,
  foreign key (RequestId) references lab_requests (ID)
);
-- -----------------------------------------------------
-- Table hmsdb.orders


drop table if exists orders;
create table orders (
  order_id       int         not null,
  supplier_id    int,
  user_id        int,
  quantity       int         not null,
  drug_id        int,
  unit_price     double      not null,
  date_created   date        not null,
  date_delivered date,
  order_status   varchar(64) not null,
  foreign key (user_id) references users (ID),
  foreign key (supplier_id) references suppliers (supplier_id),
  foreign key (drug_id) references drugs (DrugCode)
);
-- -----------------------------------------------------

drop table if exists purchases;
create table purchases (
  purchase_id  int         not null,
  drug_id      int,
  batch_number varchar(64),
  quantity     int         not null,
  unit_price   double      not null,
  discount     double,
  supplier_id  int         not null,
  invoice      varchar(64) not null,
  destination  varchar(16) not null,
  date_created date        not null,
  expiry_date  date,
  user_id      int         not null,
  order_id     int         null,
  foreign key (drug_id) references drugs (DrugCode),
  foreign key (supplier_id) references suppliers (supplier_id)
);

-- -----------------------------------------------------
-- Table hmsdb.patients
-- -----------------------------------------------------


drop table if exists suppliers;
create table suppliers (
  supplier_id int auto_increment,
  name        varchar(256) not null,
  address     varchar(256),
  phonenumber varchar(64),
  email       varchar(128),
  contact     varchar(126),
  primary key (supplier_id)
);

DROP TABLE IF EXISTS hmsdb.patients;

CREATE TABLE IF NOT EXISTS hmsdb.patients (
  PatientID           VARCHAR(255) NOT NULL,
  FirstName           VARCHAR(255) NOT NULL,
  LastName            VARCHAR(255) NOT NULL,
  DateOfBirth         DATE         NOT NULL,
  PhoneNumber         VARCHAR(32)  NULL DEFAULT NULL,
  Sex                 VARCHAR(32)  NOT NULL,
  NHIFNumber          VARCHAR(32)  NULL DEFAULT NULL,
  MaritalStatus       VARCHAR(64)  NULL DEFAULT NULL,
  Residence           VARCHAR(255) NULL DEFAULT NULL,
  ContactFirstName    VARCHAR(255) NULL DEFAULT NULL,
  ContactLastName     VARCHAR(255) NULL DEFAULT NULL,
  ContactPhoneNumber  VARCHAR(32)  NULL DEFAULT NULL,
  ContactRelationship VARCHAR(32)  NULL DEFAULT NULL,
  InsuranceProvider   VARCHAR(255) NULL DEFAULT NULL,
  InsuranceId         VARCHAR(64)  NULL DEFAULT NULL,
  DateCreated         DATE         NOT NULL,
  PRIMARY KEY (PatientID)
)
  ENGINE = InnoDB
  DEFAULT CHARACTER SET = utf8;

-- -----------------------------------------------------
-- Table hmsdb.prescriptions
-- -----------------------------------------------------

drop table if exists prescriptions;
create table prescriptions (
  Id            int         not null auto_increment primary key,
  visit_id      int         not null,
  admission_num int         not null,
  drug_code     int         not null,
  user_id       int         not null,
  quantity      int         not null,
  duration      int,
  dosage        varchar(16) not null,
  formulation   varchar(64) not null,
  status        varchar(16) not null,
  date_created  date        not null,
  time_created  time        not null,
  foreign key (drug_code) references drugs (DrugCode),
  foreign key (user_id) references users (ID)
);

-- -----------------------------------------------------
-- Table hmsdb.procedures
-- -----------------------------------------------------
DROP TABLE IF EXISTS hmsdb.procedures;

CREATE TABLE IF NOT EXISTS hmsdb.procedures (
  Name VARCHAR(255) NOT NULL,
  Cost DOUBLE       NOT NULL,
  PRIMARY KEY (Name)
)
  ENGINE = InnoDB
  DEFAULT CHARACTER SET = utf8;

-- -----------------------------------------------------
-- Table hmsdb.queues
-- -----------------------------------------------------
DROP TABLE IF EXISTS hmsdb.queues;

CREATE TABLE IF NOT EXISTS hmsdb.queues (
  VisitId      INT(11)      NOT NULL AUTO_INCREMENT,
  PatientID    VARCHAR(255) NOT NULL,
  Status       VARCHAR(64)  NOT NULL,
  DoctorID     INT(11)      NOT NULL,
  payment_mode VARCHAR(16)  NOT NULL,
  bill_number  INT(11)      NOT NULL,
  ServiceType  VARCHAR(16)  NOT NULL,
  DateCreated  DATE         NOT NULL,
  TimeCreated  TIME         NOT NULL,
  PRIMARY KEY (VisitId)
)
  ENGINE = InnoDB
  AUTO_INCREMENT = 2
  DEFAULT CHARACTER SET = utf8;

-- -----------------------------------------------------
-- Table hmsdb.refills
-- -----------------------------------------------------
DROP TABLE IF EXISTS hmsdb.refills;

CREATE TABLE IF NOT EXISTS hmsdb.refills (
  ID              INT(11)      NOT NULL AUTO_INCREMENT,
  RequesterId     INT(11)      NOT NULL,
  RefillerID      INT(11)      NULL     DEFAULT NULL,
  Name            VARCHAR(255) NOT NULL,
  DateCreated     DATE         NOT NULL,
  DateServiced    DATE         NULL     DEFAULT NULL,
  AmountRequested INT(11)      NOT NULL,
  AmountReceived  INT(11)      NULL     DEFAULT NULL,
  Status          VARCHAR(16)  NOT NULL,
  PRIMARY KEY (ID)
)
  ENGINE = InnoDB
  AUTO_INCREMENT = 2
  DEFAULT CHARACTER SET = utf8;

-- -----------------------------------------------------
-- Table hmsdb.userpermissions
-- -----------------------------------------------------
DROP TABLE IF EXISTS hmsdb.user_permissions;

CREATE TABLE IF NOT EXISTS hmsdb.user_permissions (
  UserId          INT(11)     NOT NULL,
  permission  VARCHAR(64) NOT NULL,
  value TINYINT(1)  NOT NULL,
  PRIMARY KEY (UserId, permission)
)
  ENGINE = InnoDB
  DEFAULT CHARACTER SET = utf8;

-- -----------------------------------------------------
-- Table hmsdb.users
-- -----------------------------------------------------
DROP TABLE IF EXISTS hmsdb.users;

CREATE TABLE IF NOT EXISTS hmsdb.users (
  ID           INT(11)      NOT NULL AUTO_INCREMENT,
  UserName     VARCHAR(255) NOT NULL,
  FirstName    VARCHAR(256) NOT NULL,
  LastName     VARCHAR(256) NOT NULL,
  UserCategory VARCHAR(64)  NOT NULL,
  DateCreated  DATE         NOT NULL,
  PRIMARY KEY (ID)
)
  ENGINE = InnoDB
  AUTO_INCREMENT = 2
  DEFAULT CHARACTER SET = utf8;

-- Table users
DROP TABLE if EXISTS user_modules;

CREATE TABLE user_modules (
  UserId  INT         NOT NULL,
  MODULE  VARCHAR(64) NOT NULL,
  Allowed BOOLEAN     NOT NULL
);

-- user activity log
DROP table if exists activity_log;
CREATE TABLE activity_log (
  UserID    INT      NOT NULL,
  description varchar(1024) not null,
  date date not null,
  time time not null
);
-- -----------------------------------------------------
-- Table hmsdb.visit notes
-- -----------------------------------------------------
DROP TABLE IF EXISTS hmsdb.visitnotes;

CREATE TABLE IF NOT EXISTS hmsdb.visitnotes (
  VisitId       INT(11)  NOT NULL,
  Complains     LONGTEXT NULL DEFAULT NULL,
  History       LONGTEXT NULL DEFAULT NULL,
  PhysicalExam  LONGTEXT NULL DEFAULT NULL,
  Investigation LONGTEXT NULL DEFAULT NULL,
  Treatment     LONGTEXT NULL DEFAULT NULL,
  PRIMARY KEY (VisitId)
)
  ENGINE = InnoDB
  DEFAULT CHARACTER SET = utf8;

drop table if exists lab_result_notifications;
create table lab_result_notifications(
  id int not null primary key  auto_increment,
  visit_id  int not null,
  `read` boolean not null,
  time datetime not null
);

-- -----------------------------------------------------
-- -----------------------------------------------------
DROP TABLE IF EXISTS patient_procedures;

CREATE TABLE IF NOT EXISTS patient_procedures (
  Id             int          not null auto_increment primary key,
  visit_id       INT(11)      NOT NULL,
  admission_num  int          not null,
  procedure_name varchar(1024) not null,
  user_id        int          not null,
  foreign key (user_id) references users (ID)
)
  ENGINE = InnoDB
  DEFAULT CHARACTER SET = utf8;

--
-- -----------------------------------------------------
-- Table hmsdb.vitals
-- -----------------------------------------------------
DROP TABLE IF EXISTS hmsdb.vitals;

CREATE TABLE IF NOT EXISTS hmsdb.vitals (
  AdmissionNum    int         not null,
  VisitId         INT(11)     NOT NULL,
  BMI             DOUBLE      NOT NULL,
  Weight          DOUBLE      NOT NULL,
  Height          DOUBLE      NOT NULL,
  SystolicBp      DOUBLE      NOT NULL,
  DiastolicBp     DOUBLE      NOT NULL,
  BodyTemperature DOUBLE      NOT NULL,
  RespiratoryRate DOUBLE      NOT NULL,
  PulseRate       DOUBLE      NOT NULL,
  SpO2            DOUBLE      NOT NULL,
  BloodGroup      VARCHAR(16) NOT NULL,
  RhesusFactor    VARCHAR(16) NOT NULL,
  ColorCode       VARCHAR(16) NOT NULL,
  DateCreated     DATE        NOT NULL,
  TimeCreated     TIME        not null
)
  ENGINE = InnoDB
  DEFAULT CHARACTER SET = utf8;

# Stock take table
drop table if exists stock_take;
create table stock_take (
  stock_take_id     int         not null,
  user_id           int         not null,
  drug_id           int         not null,
  actual_quantity   int         not null,
  recorded_quantity int         not null,
  value_change      double      not null,
  location          varchar(16) not null,
  date_created      date        not null,
  foreign key (user_id) references users (ID),
  foreign key (drug_id) references drugs (DrugCode)
);

drop table if exists stock_transfer;
create table stock_transfer (
  transfer_id  int         not null,
  drug_id      int         not null,
  user_id      int         not null,
  quantity     int         not null,
  origin       varchar(16) not null,
  date_created date        not null,
  foreign key (drug_id) references drugs (DrugCode),
  foreign key (user_id) references users (ID)
);

# table - wards
drop table if exists wards;
create table wards (
  ward_id                    int         not null auto_increment primary key,
  ward_name                  varchar(64) not null,
  num_beds                   int         not null,
  occupied                   int         not null,
  beds_per_row               int                  default 2,
  rate                       double      not null,
  corporate_rate             double      not null,
  nurse_charge               double      not null,
  corporate_nurse_charge     double      not null,
  doctor_charge              double      not null,
  corporate_doctor_charge    double      not null,
  admission_charge           double      not null,
  corporate_admission_charge double      not null
);
alter table wards
  auto_increment = 2;

# table - inpatients
drop table if exists inpatients;
create table inpatients (
  admission_num   int         not null auto_increment primary key,
  inpatient_num   varchar(64) not null,
  patient_id      varchar(64) not null,
  date_admitted   date        not null,
  time_admitted   time        not null,
  ward_id         int         not null,
  bed_id          int         not null,
  status          varchar(16) not null,
  payment_mode    varchar(16) not null,
  doctor_id       int         not null,
  nhif_applicable boolean     not null,
  bill_number     int         not null,
  foreign key (doctor_id) references users (ID),
  foreign key (patient_id) references patients (PatientID),
  foreign key (ward_id) references wards (ward_id),
  date_discharged date,
  time_discharged time
);
alter table inpatients
  auto_increment = 1001;

# billing
drop table if exists billing;
create table billing (
  id            int                  auto_increment primary key,
  bill_number   int         not null,
  patient_id    varchar(64) not null,
  insurer       varchar(64) null,
  insurance_id  varchar(64) null,
  description   varchar(1024) null,
  amount        double      not null,
  status        varchar(64),
  category      varchar(64),
  admission_num int,
  queue_num     int,
  date_created  date        not null,
  foreign key (patient_id) references patients (PatientID),
  paid          double      not null default 0
);

# setting
drop table if exists general_settings;
create table general_settings (
  setting_id                 int    not null auto_increment primary key,
  consultation_fee           double not null,
  corporate_consultation_fee double not null,
  nhif_rebate                double not null,
  lab_prepay                 boolean,
  pharmacy_prepay            boolean,
  radiology_prepay            boolean
);

#  Daily visit notes
drop table if exists inpatient_visits;
create table inpatient_visits (
  visit_id      int         not null auto_increment primary key,
  notes         text,
  user_id       int         not null,
  admission_num int         not null,
  date_created  date        not null,
  time_created  time        not null,
  category      varchar(16) not null,
  foreign key (admission_num) references inpatients (admission_num),
  foreign key (user_id) references users (ID)
);

# allergies
drop table if exists allergies;
create table allergies (
  patient_id varchar(64) not null,
  name          varchar(64),
  primary key (patient_id, name)
);

# operations
drop table if exists operations;
create table operations (
  admission_num int         not null,
  operation     varchar(64) not null,
  indication    varchar(64),
  surgeon       varchar(64) not null,
  assistants    varchar(256),
  anaesthetist  varchar(64),
  anaesthesia   varchar(64),
  incision      varchar(64),
  `procedure`   text,
  date          date        not null,
  time          time        not null,
  foreign key (admission_num) references inpatients (admission_num)
);

# diagnosis
drop table if exists diagnosis;
create table diagnosis (
  Id            int          not null primary key auto_increment,
  code          varchar(8)   not null,
  user_id       int          not null,
  admission_num int          not null,
  visit_id int not null,
  date_created  date         not null,
  foreign key (user_id) references users (ID),
  foreign key (code) references icd10_diagnoses(code)
);

# clinical summary
drop table if exists clinical_summary;
create table clinical_summary (
  admission_num int  not null primary key,
  summary       text,
  date_modified date not null,
  foreign key (admission_num) references inpatients (admission_num)
);

# inpatient daily charges payments
drop table if exists daily_charges;
create table daily_charges (
  bill_number int         not null,
  category    varchar(64) not null,
  paid        double      not null default 0,
  primary key (bill_number, category)
);

# accounts
drop table if exists accounts;
create table accounts (
  name            varchar(64) not null primary key,
  current_balance double      not null default 0
);

# payments
drop table if exists payments;
create table payments (
  bill_item_id  int         not null,
  receipt_no    int         not null,
  user_id       int         not null,
  amount        double      not null,
  bill_number   int         not null,
  account       varchar(64) not null,
  payment_means varchar(64) not null,
  visit_date    date        not null,
  description   varchar(64),
  category      varchar(64) not null,
  patient_name  varchar(64) not null,
  date_created  date        not null,
  foreign key (user_id) references users (Id),
  foreign key (account) references accounts (name)
);

# purchase returns table
drop table if exists purchase_returns;
create table purchase_returns (
  Id           int         not null,
  invoice      varchar(64) not null,
  supplier_id  int         not null,
  drug_id      int         not null,
  quantity     int         not null,
  buying_price double      not null,
  note         text,
  date         date        not null,
  user_id      int         not null,
  origin       varchar(64) not null,
  foreign key (user_id) references users (Id),
  foreign key (supplier_id) references suppliers (supplier_id)
);


# diagnoses
drop table if exists icd10_diagnoses;
create table icd10_diagnoses (
  code varchar(8) not null primary key,
  name varchar(1024) not null
);
# appointments
drop table if exists appointments;
create table appointments (
  id int not null auto_increment primary key,
  doctor_id int not null,
  patient_id varchar(64) not null,
  date date not null,
  time time not null,
  note text null,
  foreign key (doctor_id) references users(ID),
  foreign key (patient_id) references patients(PatientID)
);
-- triggers
drop trigger if exists test_result_trigger;
delimiter //
create trigger test_result_trigger
  after insert
  on lab_test_results
  for each row
  update lab_requests
  set Status = 'COMPLETED'
  where ID = New.RequestId
//
delimiter ;


#trigger after admitting patient
drop trigger if exists admit_patient_trigger;
delimiter //
create trigger admit_patient_trigger
  after insert
  on inpatients
  for each row
  update wards
  set wards.occupied = wards.occupied + 1
  where ward_id = New.ward_id //
delimiter ;

#trigger on discharging patient
drop trigger if exists discharge_patient_trigger;
delimiter //
create trigger discharge_patient_trigger
  after update
  on inpatients
  for each row
  if New.status = 'DISCHARGED'
  then
    update wards
    set wards.occupied = wards.occupied - 1
    where ward_id = OLD.ward_id;
  end if //
delimiter ;


# trigger after transferring stock
drop trigger if exists stock_transfer_trigger;
delimiter //
create trigger stock_transfer_trigger
  after insert
  on stock_transfer
  for each row
  begin
    if (NEW.origin = 'STORE')
    then
      update drugs
      set StoreQuantity = StoreQuantity - NEW.quantity
      where DrugCode = NEW.drug_id;
      update drugs
      set ShopQuantity = ShopQuantity + NEW.quantity
      where DrugCode = NEW.drug_id;
    ELSE
      update drugs
      set ShopQuantity = ShopQuantity - NEW.quantity
      where DrugCode = NEW.drug_id;
      update drugs
      set StoreQuantity = StoreQuantity + NEW.quantity
      where DrugCode = NEW.drug_id;
    end if;
  end;
//
delimiter ;

--  trigger to update drug quantities and orders when a new purchase is recorded
drop trigger if exists purchase_trigger;
delimiter //
create trigger purchase_trigger
  after insert
  on purchases
  for each row
  begin
    IF (NEW.destination = 'STORE')
    THEN
      update drugs
      set StoreQuantity = StoreQuantity + NEW.quantity
      where DrugCode = NEW.drug_id;
    ELSE
      update drugs
      set ShopQuantity = ShopQuantity + NEW.quantity
      where DrugCode = NEW.drug_id;
    END IF;

    IF (NEW.order_id != 0)
    THEN
      update orders
      set order_status = 'DELIVERED', date_delivered = NEW.date_created
      where New.order_id = order_id;
    end if;
  END;
//
delimiter ;


# trigger to adjust quantity after purchase return
drop trigger if exists purchase_return_trigger;
delimiter //
create trigger purchase_return_trigger
  after insert
  on purchase_returns
  for each row
  begin
    if (New.origin = 'STORE')
    then
      update drugs
      set StoreQuantity = StoreQuantity - New.quantity
      where DrugCode = NEW.drug_id;
    else
      update drugs
      set ShopQuantity = ShopQuantity - NEW.quantity
      where DrugCode = New.drug_id;
    end if;
  end;
//
delimiter ;
# trigger to adjust quantity after stock take
drop trigger if exists stock_take_trigger;
delimiter //
create trigger stock_take_trigger
  after insert
  on stock_take
  for each row
  begin
    if (NEW.location = 'STORE')
    then
      update drugs
      set StoreQuantity = New.actual_quantity
      where DrugCode = New.drug_id;
    else
      update drugs
      set StoreQuantity = New.actual_quantity
      where DrugCode = New.drug_id;
    end if;
  end;
//
delimiter ;

-- test data TODO delete this later
LOCK TABLES labtests WRITE;
/*!40000 ALTER TABLE labtests
  DISABLE KEYS */;
INSERT INTO labtests VALUES (5, 'Urinalysis', 500), (6, 'Urine', 500), (7, 'Blood', 500);
/*!40000 ALTER TABLE labtests
  ENABLE KEYS */;
UNLOCK TABLES;


INSERT INTO drugs (DrugCode, Name, BuyingPrice, SellingPrice, ReorderLevel, ShopQuantity, StoreQuantity)
values (0, 'Acetaminophen', 100, 150, 30, 300, 200);

INSERT INTO drugs (DrugCode, Name, BuyingPrice, SellingPrice, ReorderLevel, ShopQuantity, StoreQuantity)
values (0, 'Ativan', 100, 150, 30, 300, 200);
INSERT INTO drugs (DrugCode, Name, BuyingPrice, SellingPrice, ReorderLevel, ShopQuantity, StoreQuantity)
values (0, 'Citalopram', 100, 150, 30, 300, 200);
INSERT INTO drugs (DrugCode, Name, BuyingPrice, SellingPrice, ReorderLevel, ShopQuantity, StoreQuantity)
values (0, 'Omeprazole', 100, 150, 30, 300, 200);
INSERT INTO drugs (DrugCode, Name, BuyingPrice, SellingPrice, ReorderLevel, ShopQuantity, StoreQuantity)
values (0, 'Oxycodone', 100, 150, 30, 300, 200);
INSERT INTO drugs (DrugCode, Name, BuyingPrice, SellingPrice, ReorderLevel, ShopQuantity, StoreQuantity)
values (0, 'Lexapro', 100, 150, 30, 300, 200);
INSERT INTO drugs (DrugCode, Name, BuyingPrice, SellingPrice, ReorderLevel, ShopQuantity, StoreQuantity)
values (0, 'Enalapril', 100, 150, 30, 300, 200);
INSERT INTO drugs (DrugCode, Name, BuyingPrice, SellingPrice, ReorderLevel, ShopQuantity, StoreQuantity)
values (0, 'Trazodone', 100, 150, 30, 300, 200);
INSERT INTO drugs (DrugCode, Name, BuyingPrice, SellingPrice, ReorderLevel, ShopQuantity, StoreQuantity)
values (0, 'Doxycycline', 100, 150, 30, 300, 200);
INSERT INTO drugs (DrugCode, Name, BuyingPrice, SellingPrice, ReorderLevel, ShopQuantity, StoreQuantity)
values (0, 'Amlodipine', 100, 150, 30, 300, 200);
INSERT INTO drugs (DrugCode, Name, BuyingPrice, SellingPrice, ReorderLevel, ShopQuantity, StoreQuantity)
values (0, 'Ciprofloxacin', 100, 150, 30, 300, 200);
INSERT INTO drugs (DrugCode, Name, BuyingPrice, SellingPrice, ReorderLevel, ShopQuantity, StoreQuantity)
values (0, 'Adderall', 100, 150, 30, 300, 200);
INSERT INTO drugs (DrugCode, Name, BuyingPrice, SellingPrice, ReorderLevel, ShopQuantity, StoreQuantity)
values (0, 'Alprazolam', 100, 150, 30, 300, 200);
INSERT INTO drugs (DrugCode, Name, BuyingPrice, SellingPrice, ReorderLevel, ShopQuantity, StoreQuantity)
values (0, 'Metoprolol', 100, 150, 30, 300, 200);

INSERT INTO drugs (DrugCode, Name, BuyingPrice, SellingPrice, ReorderLevel, ShopQuantity, StoreQuantity)
values (0, 'Codeine', 100, 150, 30, 300, 200);
INSERT INTO drugs (DrugCode, Name, BuyingPrice, SellingPrice, ReorderLevel, ShopQuantity, StoreQuantity)
values (0, 'Gabapentin', 100, 150, 30, 300, 200);


INSERT INTO suppliers values (0, 'Cosmos Pharmaceutical Limited', 'Rangwe Rd, Nairobi', '0709 864000',
                              'cosmospharmaceutical@gmail.com', 'Mr. Kitonyi');


INSERT INTO suppliers values (0, 'Harley''s Limited', '63 Westlands Rd, Nairobi', '020 4261000',
                              'harleyslimited@gmail.com', 'Mr. Ali');

INSERT INTO suppliers values
  (0, 'Sai Pharmaceuticals Limited', '28, School Lane, Westlands, Nairobi, Nairobi', '020 4454301',
   'crediblepharm@gmail.com', 'Mr. Ndungu');


INSERT INTO suppliers values (0, 'Kenya Medical Supplies Authority', ' KEMSA HEAD OFFICE NAIROBI, Industrial Area, 13
 Commercial St, Nairobi City', '020 3922000', 'kemsa@gmail.com', 'Mr. Ndungu');

INSERT into suppliers values (0, 'Dawa Limited', ' Baba Dogo Rd, Nairobi', '0724 764747', 'dawalimited@gmail.com', '');
--
-- Table structure for table lab_test_flags
--

LOCK TABLES lab_test_flags WRITE;
/*!40000 ALTER TABLE lab_test_flags
  DISABLE KEYS */;
INSERT INTO lab_test_flags
VALUES ('5', 'Color', 'Yellow'), ('5', 'Specific gravity', '1.005 - 1.030'),
  ('5', 'pH', '5.0 - 8.0'), ('5', 'Protein', 'Negative'), ('5', 'Blood', 'Negative'),
  ('5', 'Glucose', 'Negative'), ('5', 'Leukocyte esterase', 'Negative'),
  ('5', 'Nitrite', 'Negative'), ('5', 'RBCs', '0 -5/hpf'),
  ('5', 'White blood cells', '0-5/hpf'), ('5', 'Casts', 'None'),
  ('5', 'Dysmorphic RBCs', 'None'), ('6', 'Epinephrine', '0-20'), ('6', 'Metanephrine', '0-1000'),
  ('6', 'Norepinephrine', '15-80'), ('6', 'Normetanephrine', '109-500'), ('6', 'Dopamine', '65-400'),
  ('6', 'Epinephrine', '0-20'), ('6', 'Metanephrine', '0-1000'), ('6', 'Norepinephrine', '15-80'),
  ('6', 'Normetanephrine', '109-500'), ('6', 'Dopamine', '67-400'), ('7', 'Haemoglobin', '120-160'),
  ('7', 'Leukocyte count', '4800-10000'), ('7', 'Glucose', '3.9-6.4'),
  ('7', 'Blood urea nitrogen', '7.1-35.7'), ('7', 'Creatine', '44.2-97.2'),
  ('7', 'Arterial pH', '7.35-7.45');
/*!40000 ALTER TABLE lab_test_flags
  ENABLE KEYS */;
UNLOCK TABLES;


LOCK TABLES users WRITE;
/*!40000 ALTER TABLE users
  DISABLE KEYS */;
INSERT INTO users values (1, 'admin', 'Admin', 'Admin', 'ADMIN', '2018-01-01');

/*!40000 ALTER TABLE users
  ENABLE KEYS */;
UNLOCK TABLES;

LOCK TABLES patients WRITE;
/*!40000 ALTER TABLE patients
  DISABLE KEYS */;
INSERT INTO patients VALUES
  ('1001', 'Sylvester', 'Okuma', '2001-09-22', '', 'Male', '', 'SINGLE', 'Nairobi', '', '', '', NULL, '', '',
   '2018-07-20'),
  ('1002', 'Andrew', 'Muasya', '1990-02-22', '', 'Female', '', 'WIDOWED', 'Residence', '', '', '', NULL, '', '',
   '2018-07-20'),
  ('1003', 'Judy', 'Mulonzi', '2010-09-22', '', 'Female', '', 'SINGLE', 'Watema', '', '', '', NULL, '', '',
   '2018-07-20'),
  ('1004', 'Cecilia', 'Munyao', '2001-01-22', '', 'Female', '', 'WIDOWED', 'Watema', '', '', '', NULL, '', '',
   '2018-07-20');
/*!40000 ALTER TABLE patients
  ENABLE KEYS */;
UNLOCK TABLES;
insert into wards values (0, 'WOMEN', 30, 0, 2, 1200, 1200, 1200, 1200, 1200, 1200, 1500, 2500);
insert into wards values (0, 'MEN', 30, 0, 2, 1200, 1200, 1500, 1500, 2000, 2000, 2500, 1500);
insert into wards values (0, 'CHILDREN', 30, 0, 2, 1200, 1200, 1500, 1600, 1200, 2000, 1500, 2500);
insert into wards values (0, 'PRIVATE', 28, 0, 2, 3000, 3500, 2000, 2500, 2000, 2500, 1500, 2500);

insert into insurancegroups values ('GROUP A', 3000);
insert into insurance (Name, InsuranceGroup) values ('JUBILEE', 'GROUP A');

# accounts
insert into accounts values ('Cash', 0);

SET SQL_MODE = @OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS = @OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS = @OLD_UNIQUE_CHECKS;
